package by.itstep.elena.java.stages.stage20.flowerShop.theoryOnPatternsAndInterfaces;

public class CompareTo {
    //Для упорядочивания объектов одного типа, хранящихся в массиве или коллекции, разработчики Java придумали интерфейс Comparable.
    // В нём объявлен всего один метод, compareTo:

    public interface Comparable<T> {
        public int compareTo(T o);
    }

    //Метод compareTo в Java сравнивает вызывающий объект с объектом, переданным в качестве параметра,
    // и возвращает в результате выполнения сравнения целое число:

    //  1. положительное, если вызывающий объект больше объекта, переданного в качестве параметра;
    //  2.  отрицательное, если вызывающий объект меньше объекта, переданного в качестве параметра;
    //  3. нуль, если объекты равны.

    //Зачем нужен метод compareTo в Java?
    //Программисту на Java очень часто приходиться иметь дело с массивами и списками объектов. При работе с большим количеством данных
    // их зачастую удобно хранить в упорядоченном или отсортированном виде.
    // Во-первых, это ускоряет работу с коллекцией при поиске нужной информации,
    // во-вторых — упорядоченные данные визуально лучше воспринимаются.


    //Например, для объектов класса User мы задаем сортировку по имени, а в случае равенства имен – по возрасту.
    // Объекты будут располагаться в естественном порядке (по мере увеличения значения).

    public class User implements Comparable<User> {//добавляем возможность сравнивать объекты User

        private String name;
        private Integer age;
        private String email;

        public User(String name, int age, String email) {
            this.name = name;
            this.age = age;
            this.email = email;
        }

        @Override
//реализуем метод compareTo интерфейса Comparable
        public int compareTo(User o) {

//используем метод compareTo из класса String для сравнения имен
            int result = this.name.compareTo(o.name);

//если имена одинаковые -  сравниваем возраст,
            //используя метод compareTo из класса Integer

            if (result == 0) {
                result = this.age.compareTo(o.age);
            }
            return result;
        }

        @Override
        public String toString() {
            return "{" +
                    "name='" + name + '\'' +
                    ", age=" + age +
                    ", email='" + email + '\'' +
                    '}';
        }
        //Итак, подведем итог. Если вы — сторонник порядка во всем и хотите без лишнего кода расположить
        // ваши объекты в массиве или списке – используете интерфейс Comparable.
        // Реализация его метода compareTo позволяет достаточно легко встроить механизм естественного упорядочивания объектов вашего класса.

        //Если вам приходится работать с коллекциями и массивами объектов стандартных классов, описанных в библиотеке Java,
        // используйте уже готовые реализации compareTo в этих классах.
    }
}
